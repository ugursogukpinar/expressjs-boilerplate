#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();
const http = require('http');

const config = require('../config.js');
const { makeApp } = require('../app.js');
const logger = require('../utils/logger');
const loaders = require('../loaders');

(async () => {
  const app = await makeApp();
  const port = normalizePort(config.port || '3000');
  app.set('port', port);
  const server = http.createServer(app);

  await loaders();
  server.listen(port);
  server.on('error', (err) => onError(server, err));
  server.on('listening', () => onListening(server));
})();


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const normalizedPort = parseInt(val, 10);

  if (isNaN(normalizedPort)) {
    // named pipe
    return val;
  }

  if (normalizedPort >= 0) {
    // port number
    return normalizedPort;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(server, error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(`${bind} requires elevated privileges`);
      return process.exit(1);
    case 'EADDRINUSE':
      logger.error(`${bind} is already in use`);
      return process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  logger.debug(`Listening on ${bind}`);
}
